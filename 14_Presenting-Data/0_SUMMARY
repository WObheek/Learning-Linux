Understanding how the bash shell handles inut and output can come in handy when creating your scripts. 
You can manipulate both how the script receives data and how it displays data, 
to customize your script for any environment. 
You can redirect the input of a script from the standard input(STDIN) to any file on the system
You can redirect the output of the script from the standar (STDOUT) to any file on the system.

Besides the STDOUT, you can redirect any error messages your script generates by redirecting the STDERR output.
This is accomplished by redirecting the file descriptor associated with the STDERR output which is file descriptor 2. 
You can redirect STDERR output to the same file as the STDOUT output or to a completely separate file. 
This enables you to separate normal scripts messages from any error messages generated by the script.

The bash shell allows you to create your own file descriptors to use in your scripts. 
You can create a file descriptor 3 through 9 and assign them to any output file you desire.
Once you create a file descriptor, you can redirect the output of any command to it, using the standard redirection symbols.

The bash shell also allows you to redirect input to a file descriptor, providing an easy way to read data contained in a file into your script.
you can use the lsof command to display the active file descriptors in your shell

Linux systems provide a special file, called /dev/null to allow you to redirect output that you don't want.
The linux system discards anything redirected to the /dev/null file. 
You can also use the file to produce an empty file by redirecting the contents of the /dev/null file to the file

The mktemp command is a handy feature of the bash shell that allows you to easily create temporary files and directories.
Simply specify a template for the mktemp command, and it creates a unique file each time you call it, based on the file template format
you can also create temporary files and directories in the /tmp directory on the Linux system, 
which is a special locaiton that isn't preserved between system boots.

The tee commmand is a handy way to send output both to the standard output and to a log file.
This enables you to display messages from your script on the monitor and store them in a log file at the same time.
