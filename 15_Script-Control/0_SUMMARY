
- There are over 30 linux signals that can be generated by the system and application
some: 
Signal		Value		Description
1		SIGHUP		Hangup the process
2		SIGHINT		Interrupt the process
3		SIGQUIT		STOP The process
4		SIGKILL		unconditionally terminate the process
15		SIGTERM		Terminate the process if possible
17		SIGSTOP		Unconditionally stop, but don't terminate, the process
18		SIGTSTP		Stop or pause the process, but don't terminate	
19		SIGCONT		Continue the stopped process

CTRL + C : sends SIGINT signal (stops the current process)
CTRL + Z : send SIGTSTP signal (pauses)
kill "pid" :sends SIGKILL 
ps au : shows the status of the stopped job

Trapping Signals:
	The trap command allows us to specify which Linux signals to watch for and intercept from the shell.
	::: trap commands signals

IN BG mode, a process runs without being associated with a STDIN, STDOUT, and STDERR on a terminal session
The job with Plus sign  : Default
The job with Minus sign : Will become default job after the current job finishes processing. 
# kill command send a SIGHUP signal to the default process. (after that previously job with minus sign becomes default job)
to restart a job in background mode:
bg "job_number"
# job was restarted in background mode, the command line interface prompt appears allowing other commands to be entered. 
# to restart the job in fore ground : fg command
fg "job_number"

# Nice and renice command
# limitation of renice command
#1. you can only renice processes that you own
#2. You can only renice your proesses to a lower priority
#3. Root user can renice any process to any priority


## Cron
Note : The astute reader might be wondering just how you would be ableto set a command toexecute on the last day of every month 
because you can't set the dayofmonth value to cover every month.
This problem has plagued Linux ans Unix programmers, and has spanwned quite a few different solutions. A common method is to add an if-then statement that uses the date command to check if tommorrow's date is 01

>>> 00 12 * * * if [`date +%d -d tommorrow` = 01 ] then ; command
# This will check everyday at 12 noon to see if it's the last day of the month, and if so, cron will runn the command

crontab -l # check the existing cron table
# cron diretories
# there are also pre-configured cron scripts
ls /etc/cron.*ly 
# if you have a script tht needs to be run one time per day, just copy the script to the daily directory and cron exutes it each day

# the Anacron Program
- The problem with the cron program is that it assumes that yor Linux system is operational 24 hours a day, 7 days a week.
- unless you're running in Server, not necessarily be true
- it doesn't run the command if system is off and if the command is already missed.
to solve this issue we have anacron
- it determines that a job has missed a scheduled running. it runs the job as soon as possible. 
- if our Linux system is turned off for few days. When it starts back up any jobs scheduled to run during the time it was off are automatically run
- usually used for routine log maintainance
# anacron deals only with the program located in the cron directories
cat /var/spool/anacron
# anacron program has its own table : 
cat /etc/anacrontab

# Anacron doesn't not run the scripts locatedd in '/etc/cron.hourly' 

# STARTING at the Beginning
# to run every time a user starts a new bash shell 
# Starting you scripts at boot time



